colnames(data) <- c("type","value")
a=1
q2<- unique(data$type)
q3 <- c()
for (i in 1:length(q2)) {
data$type[c(data$type==q2[i])] %>% length()->q3[i]
}
b <- max(q3)
q3
b
ak <- function(x){
x2 <- as.numeric(na.omit(as.numeric(x)))
x <- as.numeric(na.omit(as.numeric(x)))
out <- c()
for (i in 1:length(x2)){
bk <- sd(x[-i])
mc <- mean(x[-i])
if (abs(mc-x[i]) > bk*3){
out[i] <- x[i]
x2[i] <- NA
}
out <- as.numeric(na.omit(out))
}
return(list(Y=x2,N=out))}
ww <- data$value
for (i in 1:(nrow(data)/b)) {
ak(ww[(1+(i-1)*b):(i*b)]) %>% .$Y->ww[(1+(i-1)*b):(i*b)]
}
ww
data$value <- ww
process<- data
data %>%aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups ->qw
qw
data
qw
head(data)
data %>% group_by(type) %>% mutate(id=1:n()) %>%
spread(key = "type",value = "value",convert = T,drop = F) %>%
t() %>% data.frame() %>% .[-1,]
data %<>% group_by(type) %>% mutate(id=1:n()) %>%
spread(key = "type",value = "value",convert = T,drop = F) %>%
t() %>% data.frame() %>% .[-1,]
se <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- sd(x)
return(w)
}
me <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- mean(x)
return(w)
}
apply(X = data[,a:b],MARGIN = 1,FUN = me)
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = me)
colnames(data) <- c(colnames(data[-length(data)]),"mean")
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = se)
colnames(data) <- c(colnames(data[-length(data)]),"sd")
oute <- c()
oute <- as.list(x = oute)
for (i in 1:nrow(data)){
p <- ak(data[i,a:b])
oute[[i]]<- p$N
}
type <- rownames(data)
rownames(data) <- NULL
date <- cbind(type,data)
type <- rownames(qw)
rownames(qw) <- NULL
qw <- cbind(type,qw)
qw <- qw[,c(1,3)]
data <- merge(data,qw,by="type")
data
dta=iris[,c(5,1)]
data=iris[,c(5,1)]
colnames(data) <- c("type","value")
a=1
q2<- unique(data$type)
q3 <- c()
for (i in 1:length(q2)) {
data$type[c(data$type==q2[i])] %>% length()->q3[i]
}
b <- max(q3)
ak <- function(x){
x2 <- as.numeric(na.omit(as.numeric(x)))
x <- as.numeric(na.omit(as.numeric(x)))
out <- c()
for (i in 1:length(x2)){
bk <- sd(x[-i])
mc <- mean(x[-i])
if (abs(mc-x[i]) > bk*3){
out[i] <- x[i]
x2[i] <- NA
}
out <- as.numeric(na.omit(out))
}
return(list(Y=x2,N=out))}
ww <- data$value
for (i in 1:(nrow(data)/b)) {
ak(ww[(1+(i-1)*b):(i*b)]) %>% .$Y->ww[(1+(i-1)*b):(i*b)]
}
data$value <- ww
process<- data
data %>%aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups ->qw
data %<>% group_by(type) %>% mutate(id=1:n()) %>%
spread(key = "type",value = "value",convert = T,drop = F) %>%
t() %>% data.frame() %>% .[-1,]
data
se <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- sd(x)
return(w)
}
me <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- mean(x)
return(w)
}
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = me)
data
colnames(data) <- c(colnames(data[-length(data)]),"mean")
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = se)
colnames(data) <- c(colnames(data[-length(data)]),"sd")
data
oute <- c()
oute <- as.list(x = oute)
for (i in 1:nrow(data)){
p <- ak(data[i,a:b])
oute[[i]]<- p$N
}
type <- rownames(data)
type
rownames(data) <- NULL
date <- cbind(type,data)
data <- cbind(type,data)
type <- rownames(qw)
rownames(qw) <- NULL
qw <- cbind(type,qw)
qw <- qw[,c(1,3)]
data <- merge(data,qw,by="type")
data <- data[,c(1,ncol(data)-2,ncol(data)-1,c(ncol(data)))]
return(list("data"=data,"out"=oute,"process"=process))
data
process
oute
data=iris[,c(5,1)]
colnames(data) <- c("type","value")
data$value <- as.numeric(data$value)
data%>% aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups->e1
e1$type <- rownames(e1)
rownames(e1) <- NULL
e1 <- e1[,c(3,2)]
aggregate(x = qq,by = list(qq$type),FUN = mean) %>% .[,c(1,3)]->e2
colnames(e2) <- c("type","mean")
aggregate(x = qq,by = list(qq$type),FUN = sd) %>% .[,c(1,3)]->e3
colnames(e3) <- c("type","sd")
e4<- merge(e2,e3,by = "type")
qw<- merge(e4,e1,by = "type")
data <- qw
colnames(data) <- c("type","value")
data$value <- as.numeric(data$value)
data%>% aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups->e1
data=iris[,c(5,1)]
colnames(data) <- c("type","value")
data$value <- as.numeric(data$value)
data%>% aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups->e1
e1$type <- rownames(e1)
rownames(e1) <- NULL
e1 <- e1[,c(3,2)]
aggregate(x = qq,by = list(data$type),FUN = mean) %>% .[,c(1,3)]->e2
aggregate(x = data,by = list(data$type),FUN = mean) %>% .[,c(1,3)]->e2
colnames(e2) <- c("type","mean")
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
colnames(e3) <- c("type","sd")
data
aggregate(x = data,by = list(data$type),FUN = mean) %>% .[,c(1,3)]->e2
e2
colnames(e2) <- c("type","mean")
e3
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
data$value <- as.numeric(data$value)
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
data$type <- as.character(data$type)
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
e3
aggregate(x = data,by = list(data$type),FUN = mean) %>% .[,c(1,3)]->e2
colnames(e2) <- c("type","mean")
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
colnames(e3) <- c("type","sd")
e4<- merge(e2,e3,by = "type")
qw<- merge(e4,e1,by = "type")
data <- qw
data
#' Get significance,mean and sd without exception value
#'
#' @param data the data you wanna calculating.Make sure that the first column is diferent type,and the second is value.
#' @param alpha level of significance test
#' @param method it can be 'more' when there are more than three replicates per experimental treatment;otherwise,it should be 'less'
#' @return process data out
#' @export lsdd
#' @author Sidong-Li <2875620735@qq.com>
#' @examples lsdd(date=yourdata)
lsdd <- function(data,alpha=0.05,method="more"){
if (method=="more") {
colnames(data) <- c("type","value")
a=1
q2<- unique(data$type)
q3 <- c()
for (i in 1:length(q2)) {
data$type[c(data$type==q2[i])] %>% length()->q3[i]
}
b <- max(q3)
ak <- function(x){
x2 <- as.numeric(na.omit(as.numeric(x)))
x <- as.numeric(na.omit(as.numeric(x)))
out <- c()
for (i in 1:length(x2)){
bk <- sd(x[-i])
mc <- mean(x[-i])
if (abs(mc-x[i]) > bk*3){
out[i] <- x[i]
x2[i] <- NA
}
out <- as.numeric(na.omit(out))
}
return(list(Y=x2,N=out))}
ww <- data$value
for (i in 1:(nrow(data)/b)) {
ak(ww[(1+(i-1)*b):(i*b)]) %>% .$Y->ww[(1+(i-1)*b):(i*b)]
}
data$value <- ww
process<- data
data %>%aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups ->qw
data %<>% group_by(type) %>% mutate(id=1:n()) %>%
spread(key = "type",value = "value",convert = T,drop = F) %>%
t() %>% data.frame() %>% .[-1,]
se <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- sd(x)
return(w)
}
me <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- mean(x)
return(w)
}
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = me)
colnames(data) <- c(colnames(data[-length(data)]),"mean")
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = se)
colnames(data) <- c(colnames(data[-length(data)]),"sd")
oute <- c()
oute <- as.list(x = oute)
for (i in 1:nrow(data)){
p <- ak(data[i,a:b])
oute[[i]]<- p$N
}
type <- rownames(data)
rownames(data) <- NULL
data <- cbind(type,data)
type <- rownames(qw)
rownames(qw) <- NULL
qw <- cbind(type,qw)
qw <- qw[,c(1,3)]
data <- merge(data,qw,by="type")
data <- data[,c(1,ncol(data)-2,ncol(data)-1,c(ncol(data)))]
return(list("data"=data,"out"=oute,"process"=process))
}else if (method=="less") {
colnames(data) <- c("type","value")
data$value <- as.numeric(data$value)
data$type <- as.character(data$type)
data%>% aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups->e1
e1$type <- rownames(e1)
rownames(e1) <- NULL
e1 <- e1[,c(3,2)]
aggregate(x = data,by = list(data$type),FUN = mean) %>% .[,c(1,3)]->e2
colnames(e2) <- c("type","mean")
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
colnames(e3) <- c("type","sd")
e4<- merge(e2,e3,by = "type")
qw<- merge(e4,e1,by = "type")
data <- qw
return(list("data"=data))
}
else{
message("method must be 'more' or 'less'!")
}
}
lsdd(data = iris[,c(5,1)])
lsdd(data = iris[,c(5,1)],alpha = 0.01)
lsdd(data = iris[,c(5,1)],method = "le")
lsdd(data = iris[,c(5,1)],method = "less")
options(warn = -1)
#' Get significance,mean and sd without exception value
#'
#' @param data the data you wanna calculating.Make sure that the first column is diferent type,and the second is value.
#' @param alpha level of significance test
#' @param method it can be 'more' when there are more than three replicates per experimental treatment;otherwise,it should be 'less'
#' @return process data out
#' @export lsdd
#' @author Sidong-Li <2875620735@qq.com>
#' @examples lsdd(date=yourdata)
lsdd <- function(data,alpha=0.05,method="more"){
options(warn = -1)
if (method=="more") {
colnames(data) <- c("type","value")
a=1
q2<- unique(data$type)
q3 <- c()
for (i in 1:length(q2)) {
data$type[c(data$type==q2[i])] %>% length()->q3[i]
}
b <- max(q3)
ak <- function(x){
x2 <- as.numeric(na.omit(as.numeric(x)))
x <- as.numeric(na.omit(as.numeric(x)))
out <- c()
for (i in 1:length(x2)){
bk <- sd(x[-i])
mc <- mean(x[-i])
if (abs(mc-x[i]) > bk*3){
out[i] <- x[i]
x2[i] <- NA
}
out <- as.numeric(na.omit(out))
}
return(list(Y=x2,N=out))}
ww <- data$value
for (i in 1:(nrow(data)/b)) {
ak(ww[(1+(i-1)*b):(i*b)]) %>% .$Y->ww[(1+(i-1)*b):(i*b)]
}
data$value <- ww
process<- data
data %>%aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups ->qw
data %<>% group_by(type) %>% mutate(id=1:n()) %>%
spread(key = "type",value = "value",convert = T,drop = F) %>%
t() %>% data.frame() %>% .[-1,]
se <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- sd(x)
return(w)
}
me <- function(x){
q <- ak(x)
x <- as.numeric(q$Y)
x <- na.omit(x)
w <- mean(x)
return(w)
}
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = me)
colnames(data) <- c(colnames(data[-length(data)]),"mean")
data[,length(data)+1] <- apply(X = data[,a:b],MARGIN = 1,FUN = se)
colnames(data) <- c(colnames(data[-length(data)]),"sd")
oute <- c()
oute <- as.list(x = oute)
for (i in 1:nrow(data)){
p <- ak(data[i,a:b])
oute[[i]]<- p$N
}
type <- rownames(data)
rownames(data) <- NULL
data <- cbind(type,data)
type <- rownames(qw)
rownames(qw) <- NULL
qw <- cbind(type,qw)
qw <- qw[,c(1,3)]
data <- merge(data,qw,by="type")
data <- data[,c(1,ncol(data)-2,ncol(data)-1,c(ncol(data)))]
return(list("data"=data,"out"=oute,"process"=process))
}else if (method=="less") {
colnames(data) <- c("type","value")
data$value <- as.numeric(data$value)
data$type <- as.character(data$type)
data%>% aov(value~type,data=.) %>%
LSD.test("type",group = T,console = T,alpha = alpha) %>% .$groups->e1
e1$type <- rownames(e1)
rownames(e1) <- NULL
e1 <- e1[,c(3,2)]
aggregate(x = data,by = list(data$type),FUN = mean) %>% .[,c(1,3)]->e2
colnames(e2) <- c("type","mean")
aggregate(x = data,by = list(data$type),FUN = sd) %>% .[,c(1,3)]->e3
colnames(e3) <- c("type","sd")
e4<- merge(e2,e3,by = "type")
qw<- merge(e4,e1,by = "type")
data <- qw
return(list("data"=data))
}
else{
message("method must be 'more' or 'less'!")
}
}
lsdd(data = iris[,c(5,1)],method = "less")
lsdd(data = iris[,c(5,1)],method = "more")
usethis::use_package("magrittr")
usethis::use_package("tidyverse")
usethis::use_package("tidyverse",type = "depends")
usethis::use_package("agricolae")
usethis::use_package("ggplot2")
usethis::use_package("RColorBrewer")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
easyplot(data = irisc[,c(5,1)])
easyplot(data = iris[,c(5,1)])
devtools::load_all()
easyplot(data = iris[,c(5,1)])
easyplot(data = iris[,c(5,1)],rank = "none")
easyplot(data = iris[,c(5,1)],rank = c("versicolor","setosa","virginica"))
easyplot(data = iris[,c(5,1)],rank = c("versicolor","setosa","virginica"),xlab = "",ylab = "",plot = "boxplot",angle = 0,hjust = 0.5,vjust = 0.5,savename = "boxplot.jpg",width = 8,height = 7,color = c("red","blue","grey"))
easyplot(data = iris[,c(5,1)],rank = c("versicolor","setosa","virginica"),xlab = "",ylab = "",plot = "boxplo",angle = 0,hjust = 0.5,vjust = 0.5,savename = "boxplot.jpg",width = 8,height = 7,color = c("red","blue","grey"))
devtools::document()
devtools::check()
devtools::load_all()
mydata
easyplot(data=mydata,plot="barplot")
devtools::check()
devtools::build()
save.image()
q()
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
p_list <- c("agricolae","magrittr","ggplot2","RColorBrewer")
for (p in p_list) {
if (!requireNamespace(p,quietly = T)) {
install.packages(p)
}
library(p)
}
p_list <- c("agricolae","magrittr","ggplot2","RColorBrewer")
p_list <- c("agricolae","magrittr","ggplot2","RColorBrewer")
for (p in 1:4) {
if (!requireNamespace(p_list[p],quietly = T)) {
install.packages(p_list[p])
}
library(p_list[p])
}
i=1
p_list[i]
for (i in 1:4) {
if (!requireNamespace(p_list[i],quietly = T)) {
install.packages(p_list[i])
}
library(p_list[p])
}
for (i in 1:4) {
if (!requireNamespace(p_list[i],quietly = T)) {
install.packages(p_list[i])
}
library(p_list[i])
}
p_list[i]
p <- p_list[i]
library(p)
p_list[i] %>% library()
p_list[i]
p_list[i] %>% library()
p_list[i]
for (i in p_list) {
if (!requireNamespace(p,quietly = T)) {
install.packages(p)
}
}
for (i in p_list) {
if (!requireNamespace(p,quietly = T)) {
install.packages(p)
}
require(p)
}
devtools::document()
devtools::check()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
save.image()
q()
devtools::load_all()
easyplot(data = iris[,c(5,1)],method = "less")
devtools::load_all()
easyplot(data = iris[,c(5,1)],method = "less")
devtools::load_all()
easyplot(data = iris[,c(5,1)],method = "less")
easyplot(data = iris[,c(5,1)],method = "less",angle = 0,hjust = 0.5,vjust = 0.5)
devtools::build()
save.image()
q()
